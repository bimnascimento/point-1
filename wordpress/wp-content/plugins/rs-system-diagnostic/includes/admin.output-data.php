<?php
/**
 *	Included in class RS_System_Diagnostic
 *  File Version 1.0.9
 */

if( !defined( 'ABSPATH' ) || !defined( 'RSSD_VERSION' ) ) {
	if( !headers_sent() ) { @header( $_SERVER['SERVER_PROTOCOL'] . ' 403 Forbidden', TRUE, 403 ); @header( 'X-Robots-Tag: noindex', TRUE ); }
	die( 'ERROR: Direct access to this file is not allowed.' );
}


$remote_url_key	= self::get_option( 'remote_url_key' );
if( !empty( $remote_url_key ) ) {
	$remote_url	= RSSD_SITE_URL.'/?'.RSSD_GET_VAR.'='.$remote_url_key;
} else {
	$remote_url = self::generate_url( TRUE );
}
$spc_4	= str_repeat( ' ',  4 );
$spc_5	= str_repeat( ' ',  5 );
$spc_26	= str_repeat( ' ', 26 );
$spc_32	= str_repeat( ' ', 32 );
$output	= $header = $data = '';
$last_transient		= 'rssd_'.$remote_url_key;
$last_transient_set	= self::get_option( 'last_transient_set' );
$last_transient_exp	= get_transient( $last_transient_set ) ? FALSE : TRUE;
$cached	= get_transient( $last_transient );
$header .= '// Generated by the RS System Diagnostic Plugin //'.RSSD_EOL.RSSD_EOL;
$header .= '//// Browser of Current Viewer ///////////////////'.RSSD_EOL.RSSD_EOL;
$header .= $browser.RSSD_EOL; unset( $browser );
$header .= '//// End Browser of Current Viewer ///////////////'.RSSD_EOL.RSSD_EOL;
if( self::is_remote_view() && $last_transient_set === $last_transient && TRUE === $last_transient_exp ) {
	self::generate_url( TRUE );
	$error = 'ERROR: URL has expired. Please request a new URL. [Code E002]';
	self::wp_die( $error, '404' );
} elseif( self::is_remote_view() && !empty( $cached ) ) {

	/* Use Cached Output*/	
	$output = $header.$cached; unset( $cached );
} elseif( is_admin() || ( self::is_remote_view() && empty( $cached ) ) ) {
	
	/* Generate Fresh Output*/
	$mysql_ver				= $wpdb->use_mysqli ? @mysqli_get_server_info( $wpdb->dbh ) : @mysql_get_server_info();
	$wp_memory_limit		= WP_MEMORY_LIMIT;
	$wp_max_memory_limit	= WP_MAX_MEMORY_LIMIT;
	$php_memory_limit		= self::get_php_memory_limit();
	$session_id				= @session_id();
	$session_name_default	= esc_html( ini_get( 'session.name' ) );
	$error_reporting_level	= self::error_level_tostring( error_reporting(), ' | ' );
	$error_reporting_level	= ( strpos( $error_reporting_level, 'E_ALL' ) === 0 ) ? 'E_ALL' : $error_reporting_level;
	$wp_database_size		= self::get_db_size();
	$server_cache			= implode( ' / ', self::get_server_cache() );
	$server_cache			= ( !empty( $server_cache ) ) ? $server_cache : 'None Detected';
	$loaded_extensions		= ( function_exists( 'get_loaded_extensions' ) ) ? (array) @get_loaded_extensions() : array() ;
	/* Start Output */
	$data .= 'Website Name:             '. get_bloginfo('name') . RSSD_EOL;
	$data .= RSSD_EOL;

	$data .= 'WordPress Address (URL):  '. wordwrap( site_url() .'  |  site_url() - The location where your WordPress core files reside.'.RSSD_EOL, 75, RSSD_EOL.$spc_26 );	/* SITE_URL - site_url() */
	$data .= 'Site Address (URL):       '. wordwrap( home_url() .'  |  home_url() - The URL people should use to get to your site.'.RSSD_EOL, 75, RSSD_EOL.$spc_26 );			/* HOME_URL - home_url() */
	if( !is_multisite() && self::get_domain( site_url() ) !== self::get_domain( home_url() ) ) {
		$data .= 'Domain Mismatch:          '. wordwrap( 'WARNING - CONFIGURATION: The web domains in your "WordPress Address" and "Site Address" settings do not match.'. RSSD_EOL, 75, RSSD_EOL.$spc_26 );
	}
	$data .= RSSD_EOL;

	$data .= 'WordPress Version:        '. RSSD_WP_VERSION . RSSD_EOL;
	$data .= 'Multisite:                '; $data .= is_multisite() ? 'Yes' : 'No'; $data .= RSSD_EOL;
	$data .= 'Permalink Structure:      '. get_option( 'permalink_structure' ) . RSSD_EOL;
	$data .= 'Active Theme:             '. $theme . RSSD_EOL; unset( $theme );
	$data .= RSSD_EOL;

	if( !empty( $web_host ) || !empty( $host_ns ) ) {
		$web_host_proxy						= self::get_web_proxy( self::$ip_dns_params );
		$web_host_proxy						= ( !empty( $web_host_proxy ) ) ? $web_host_proxy : 'None Detected';
		$data .= 'Web Host:                 '. $web_host . RSSD_EOL;
		$data .= 'Name Servers:             '. $host_ns . RSSD_EOL;
		$data .= 'Proxy / WAF / CDN:        '. $web_host_proxy . RSSD_EOL;
		$data .= RSSD_EOL;
	}
	unset( $web_host, $host_ns, $web_host_proxy );

	$data .= 'PHP Version:              '. wordwrap( ( version_compare( PHP_VERSION, '5.6', '<' ) ) ? PHP_VERSION.'  |  WARNING - SECURITY/PERFORMANCE: The version of PHP running on your server is extremely outdated. Please upgrade your PHP Version to 5.6, 7.0, or higher.' : PHP_VERSION, 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	$data .= 'MySQL Version:            '. wordwrap( ( version_compare( $mysql_ver, '5.5', '<' ) ) ? $mysql_ver.'  |  WARNING - PERFORMANCE: WordPress recommends MySQL Version 5.6 or higher. Please upgrade your MySQL Version.' : $mysql_ver, 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL; unset( $mysql_ver );
	$data .= 'Server Software:          '. $_SERVER['SERVER_SOFTWARE'] . ' / ' . PHP_OS . RSSD_EOL;
	$data .= 'Server Cache:             '. $server_cache . RSSD_EOL; unset( $server_cache );
	$data .= 'Server Hostname:          '. RSSD_SERVER_HOSTNAME . RSSD_EOL;
	$data .= 'Server API Name:          '. PHP_SAPI . RSSD_EOL;
	$data .= RSSD_EOL;

	$data .= 'WP Memory Limit:          '. wordwrap( ( $wp_memory_limit < 64 ) ? $wp_memory_limit.'  |  WARNING - PERFORMANCE: WordPress Memory Limit too low. Should be at least 64MB. 96-128MB+ is recommended.' : $wp_memory_limit, 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL; unset( $wp_memory_limit );
	$data .= 'WP Admin Memory Limit:    '. $wp_max_memory_limit.RSSD_EOL; unset( $wp_max_memory_limit );
	$data .= 'Current WP Memory Used:   '. self::wp_memory_used() .RSSD_EOL;
	$data .= 'Max WP Memory Used:       '. self::wp_memory_used( TRUE ) .RSSD_EOL;
	$data .= 'PHP Safe Mode:            '; $data .= ini_get( 'safe_mode' ) ? 'Yes' : 'No'; $data .= RSSD_EOL;
	$data .= 'PHP Memory Limit:         '. $php_memory_limit . RSSD_EOL; unset( $php_memory_limit );
	$data .= 'PHP Upload Max Size:      '. ini_get( 'upload_max_filesize' ) . RSSD_EOL;
	$data .= 'PHP Post Max Size:        '. ini_get( 'post_max_size' ) . RSSD_EOL;
	$data .= 'PHP Upload Max Filesize:  '. ini_get( 'upload_max_filesize' ) . RSSD_EOL;
	$data .= 'PHP Time Limit:           '. ini_get( 'max_execution_time' ) . RSSD_EOL;
	$data .= 'PHP Max Input Vars:       '. ini_get( 'max_input_vars' ) . RSSD_EOL;
	$data .= 'PHP Arg Separator:        '. ini_get( 'arg_separator.output' ) . RSSD_EOL;
	$data .= 'PHP Allow URL File Open:  '. wordwrap( ini_get( 'allow_url_fopen' ) ? 'Yes  |  WARNING - SECURITY: \'allow_url_fopen\' should be disabled.' : 'No', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	$data .= 'PHP Allow URL File Incl:  '. wordwrap( ini_get( 'allow_url_include' ) ? 'Yes  |  WARNING - SECURITY: \'allow_url_include\' should be disabled.' : 'No', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	$data .= 'PHP Short Open Tags:      '. wordwrap( ini_get( 'short_open_tag' ) ? 'Enabled  |  WARNING - SECURITY: \'short_open_tag\' should be disabled.' : 'Disabled', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	$data .= 'Expose PHP:               '. wordwrap( ini_get( 'expose_php' ) ? 'Yes  |  WARNING - SECURITY: \'expose_php\' should be disabled.' : 'No', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	$data .= RSSD_EOL;

	/**
	 *	wp-config.php CONSTANTS			https://codex.wordpress.org/Editing_wp-config.php
	 */
	$data .= 'WP_DEBUG:                 '; $data .= defined( 'WP_DEBUG' ) ? WP_DEBUG ? 'Enabled': 'Disabled' : 'Not set'; $data .= RSSD_EOL;
	$data .= 'WP_DEBUG_LOG:             '; $data .= defined( 'WP_DEBUG_LOG' ) ? WP_DEBUG_LOG ? 'Enabled' : 'Disabled' : 'Not set'; $data .= RSSD_EOL;
	$data .= 'WP_DEBUG_DISPLAY:         '; $data .= defined( 'WP_DEBUG_DISPLAY' ) ? WP_DEBUG_DISPLAY ? 'Enabled' : 'Disabled' : 'Not set'; $data .= RSSD_EOL;
	$data .= 'SCRIPT_DEBUG:             '; $data .= defined( 'SCRIPT_DEBUG' ) ? SCRIPT_DEBUG ? 'Enabled' : 'Disabled' : 'Not set'; $data .= RSSD_EOL;
	$data .= 'WP_CACHE:                 '; $data .= defined( 'WP_CACHE' ) ? WP_CACHE ? 'Enabled' : 'Disabled' : 'Not set'; $data .= RSSD_EOL;
	$data .= 'AUTOSAVE_INTERVAL:        '; $data .= defined( 'AUTOSAVE_INTERVAL' ) ? AUTOSAVE_INTERVAL : 'Not set'; $data .= RSSD_EOL;
	$data .= 'WP_POST_REVISIONS:        '; $data .= defined( 'WP_POST_REVISIONS' ) ? WP_POST_REVISIONS : 'Not set'; $data .= RSSD_EOL;
	$data .= 'EMPTY_TRASH_DAYS:         '; $data .= defined( 'EMPTY_TRASH_DAYS' ) ? EMPTY_TRASH_DAYS : 'Not set'; $data .= RSSD_EOL;
	$data .= 'DISALLOW_FILE_EDIT:       '. trim( wordwrap( defined( 'DISALLOW_FILE_EDIT' ) ? DISALLOW_FILE_EDIT ? 'Enabled' . RSSD_EOL : 'Disabled' . RSSD_EOL : 'Not set  |  WARNING - SECURITY: This should be enabled.', 75, RSSD_EOL.$spc_26 ) ) . RSSD_EOL;
	$data .= RSSD_EOL;

	$data .= 'WP Database Size:         '. $wp_database_size . RSSD_EOL; unset( $wp_database_size );
	$data .= 'WP Table Prefix Length:   '. strlen( $wpdb->prefix ).'  |  '; if( strlen( $wpdb->prefix ) > 16 ) { $data .= 'WARNING: Too Long. Ideal length is 8-16 characters long.'; } elseif( strlen( $wpdb->prefix ) < 8 ) { $data .= 'WARNING: Too Short. Ideal length is 8-16 characters long.'; } else { $data .= 'STATUS: ACCEPTABLE'; } $data .= RSSD_EOL;
	$data .= 'WP Table Prefix Default:  '. wordwrap( ( $wpdb->prefix !== 'wp_' ) ? 'No' : 'Yes  |  WARNING - SECURITY: The WP Table Prefix should be changed to a custom value between 8-16 characters long.', 75, RSSD_EOL.$spc_26 ) . RSSD_EOL; 
	$data .= RSSD_EOL;

	$data .= 'Show On Front:            '. get_option( 'show_on_front' ) . RSSD_EOL;
	$data .= 'Page On Front:            '; $id = get_option( 'page_on_front' ); $data .= trim( get_the_title( $id ) . ' (#' . $id . ')' ) . RSSD_EOL;
	$data .= 'Page For Posts:           '; $id = get_option( 'page_for_posts' ); $data .= trim( get_the_title( $id ) . ' (#' . $id . ')' ) . RSSD_EOL;
	$data .= 'Registered Post Stati:    '. wordwrap( implode( ', ', get_post_stati() ) . RSSD_EOL, 75, RSSD_EOL.$spc_26 ); 
	$data .= RSSD_EOL;

	$data .= 'WP Remote Post:           '. $wp_remote_post.RSSD_EOL; unset( $wp_remote_post );
	$data .= 'PHP Sessions:             '; $data .= ( isset( $_SESSION ) || $session_id ) ? 'Active' : 'Inactive'; $data .= RSSD_EOL; unset( $session_id );
	$data .= 'Default Session Name:     '. wordwrap( ( $session_name_default === 'PHPSESSID' ) ? $session_name_default.'  |  WARNING - SECURITY: \'session.name\' should be set to a custom value, not the PHP default.' : $session_name_default, 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL; unset( $session_name_default );
	$data .= 'Session Cookie Path:      '. esc_html( ini_get( 'session.cookie_path' ) ) . RSSD_EOL;
	$data .= 'Session Save Path:        '. esc_html( ini_get( 'session.save_path' ) ) . RSSD_EOL;
	$data .= 'Use Session Cookies:      '; $data .= ini_get( 'session.use_cookies' ) ? 'On' : 'Off'; $data .= RSSD_EOL;
	$data .= 'Session Use Cookies Only: '. wordwrap( ini_get( 'session.use_only_cookies' ) ? 'On' : 'Off  |  WARNING - SECURITY: \'session.use_only_cookies\' should be enabled.', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	$data .= 'Session Cookie HTTP Only: '. wordwrap( ini_get( 'session.cookie_httponly' ) ? 'On' : 'Off  |  WARNING - SECURITY: \'session.cookie_httponly\' should be enabled to prevent JavaScript from accessing Session Cookies.', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	if( self::is_https() ) {
		$data .= 'Session Cookie Secure:    '. wordwrap( ini_get( 'session.cookie_secure' ) ? 'On' : 'Off  |  WARNING - SECURITY: \'session.cookie_secure\' should be enabled when HTTPS is enabled.', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	}
	$data .= RSSD_EOL;

	/**
	 *  Check additional security related settings for best practices, and include link to how to fix. On RSM Site add some security tutorials
	 *  	- http://php.net/manual/en/ini.list.php
	 *  		- http://php.net/manual/en/session.configuration.php
	 *  		- http://php.net/manual/en/filesystem.configuration.php
	 *  	- http://phpsec.org/projects/phpsecinfo/tests/
	 *  		- http://phpsec.org/projects/phpsecinfo/tests/allow_url_fopen.html
	 *  		- http://phpsec.org/projects/phpsecinfo/tests/allow_url_include.html
	 *  		- http://phpsec.org/projects/phpsecinfo/tests/display_errors.html
	 *  		- http://phpsec.org/projects/phpsecinfo/tests/expose_php.html
	 *  		- http://phpsec.org/projects/phpsecinfo/tests/file_uploads.html
	 *  		- http://phpsec.org/projects/phpsecinfo/tests/open_basedir.html
	 *  		- http://phpsec.org/projects/phpsecinfo/tests/save_path.html
	 *  		- http://phpsec.org/projects/phpsecinfo/tests/upload_tmp_dir.html
	 */

	$data .= 'DISPLAY ERRORS:           '. wordwrap( ( ini_get( 'display_errors' ) ) ? 'On (' . ini_get( 'display_errors' ) . ')  |  WARNING - SECURITY: \'display_errors\' should be disabled.' : 'Disabled', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	/**
	 *	TO DO:
	 *	- Add note letting users know ways to fix: php.ini, .htaccess, and wp-config.php
	 */
	$data .= 'ERROR LOGGING:            '. wordwrap( ( ini_get( 'log_errors' ) ) ? 'On' : 'Off  |  NOTICE - DEBUGGING: To properly debug your site, \'log_errors\' should be enabled.', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	$data .= 'ERROR LOG LOCATION:       '. wordwrap( ( ini_get( 'error_log' ) ) ? esc_html( ini_get( 'error_log' ) ) : 'Not Set  |  WARNING - SECURITY: \'error_log\' should be set to a custom location outside the web root.', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	$data .= 'ERROR REPORTING LEVEL:    '. wordwrap( ( error_reporting() ) ? $error_reporting_level : 'N/A  |  NOTICE - DEBUGGING: To properly debug your site, \'error_reporting\' should be set to E_ALL', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL; unset( $error_reporting_level );
	$data .= RSSD_EOL;

	$data .= 'fsockopen:                '. wordwrap( ( function_exists( 'fsockopen' ) ) ? 'Your server supports fsockopen.' : 'Your server does not support fsockopen.', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	$data .= 'cURL:                     '. wordwrap( ( function_exists( 'curl_init' ) ) ? 'Your server supports cURL.' : 'Your server does not support cURL.', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	$data .= 'SOAP Client:              '. wordwrap( ( class_exists( 'SoapClient' ) ) ? 'Your server has the SOAP Client enabled.' : 'Your server does not have the SOAP Client enabled.', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	$data .= 'SUHOSIN:                  '. wordwrap( ( extension_loaded( 'suhosin' ) ) ? 'Your server has SUHOSIN installed.' : 'Your server does not have SUHOSIN installed.', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	$data .= 'MySQLi:                   '. wordwrap( ( function_exists( 'mysqli_init' ) || extension_loaded( 'mysqli' ) ) ? 'Your server has the MySQLi extension enabled.' : 'Your server does not have the MySQLi extension enabled.  |  WARNING - PERFORMANCE: MySQLi should be enabled.', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	$data .= 'Loaded PHP Extensions:    '. wordwrap( implode( ', ', self::sort_unique( $loaded_extensions ) ), 75, RSSD_EOL.$spc_26 ) . RSSD_EOL;
	$data .= RSSD_EOL;

	$data .= RSSD_EOL.'ACTIVE PLUGINS:'.RSSD_EOL.RSSD_EOL;

	if ( !function_exists( 'get_plugins' ) ) { include ABSPATH.'wp-admin/includes/plugin.php'; }
	/* TO DO: Replace with relevant functions */
	$plugins			= get_plugins();
	$active_plugins		= get_option( 'active_plugins', array() );
	$inactive_plugins	= array();
	$i = 0;
	foreach ( $plugins as $plugin_path => $plugin ) {
		if( ! in_array( $plugin_path, $active_plugins ) ) { $inactive_plugins[$plugin_path] = $plugin; continue; }
		$slug					= trim( dirname( $plugin_path ), '/' );
		$wp_org_url				= 'https://wordpress.org/plugins/' . $slug . '/';
		$sec_chk_url			= 'https://wpvulndb.com/plugins/' . $slug;
		$plugin['PluginURI']	= self::fix_url( $plugin['PluginURI'], TRUE );
		$official_url_txt		= ( !empty( $plugin['PluginURI'] ) && $plugin['PluginURI'] !== $wp_org_url ) ? RSSD_EOL.$spc_5 . 'Official Site:  ' . $plugin['PluginURI'] : '';
		$security_chk_txt		= RSSD_EOL.$spc_5 . 'Security Check: ' . $sec_chk_url;
		$data .= wordwrap( $plugin['Name'] . ': ' . $plugin['Version'] . RSSD_EOL.$spc_5 . 'WordPress.org:  ' . $wp_org_url . $official_url_txt . $security_chk_txt, 26 + 75, RSSD_EOL.$spc_5 ); $data .= RSSD_EOL; $i++;
	}
	$n = (int) $i;
	$data .= RSSD_EOL.'TOTAL ACTIVE PLUGINS: '. $n . wordwrap( ( $n > 30 ) ? '  |  WARNING - PERFORMANCE: Using this many plugins can cause site slowdowns and conflicts. Try to minimize plugins used.' : '', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	if( is_multisite() ) {
		$data .= RSSD_EOL.RSSD_EOL.'NETWORK ACTIVE PLUGINS:'.RSSD_EOL.RSSD_EOL;
		$network_plugins			= wp_get_active_network_plugins();
		$network_active_plugins		= get_site_option( 'active_sitewide_plugins', array() );
		$network_inactive_plugins	= array();
		$i = 0;
		foreach ( $network_plugins as $plugin_path ) {
			$plugin_base = plugin_basename( $plugin_path );
			if( ! isset( $network_active_plugins[$plugin_base] ) ) { continue; }
			unset( $inactive_plugins[$plugin_path] );
			$plugin					= get_plugin_data( $plugin_path );
			$slug					= trim( dirname( $plugin_path ), '/' );
			$wp_org_url				= 'https://wordpress.org/plugins/' . $slug . '/';
			$sec_chk_url			= 'https://wpvulndb.com/plugins/' . $slug;
			$plugin['PluginURI']	= self::fix_url( $plugin['PluginURI'], TRUE );
			$official_url_txt		= ( !empty( $plugin['PluginURI'] ) && $plugin['PluginURI'] !== $wp_org_url ) ? RSSD_EOL.$spc_5 . 'Official Site:  ' . $plugin['PluginURI'] : '';
			$security_chk_txt		= RSSD_EOL.$spc_5 . 'Security Check: ' . $sec_chk_url;
			$data .= wordwrap( $plugin['Name'] . ': ' . $plugin['Version'] . RSSD_EOL.$spc_5 . 'WordPress.org:  ' . $wp_org_url . $official_url_txt . $security_chk_txt, 26 + 75, RSSD_EOL.$spc_5 ); $data .= RSSD_EOL; $i++;
		}
		$n = (int) $i;
		$data .= RSSD_EOL.'TOTAL NETWORK ACTIVE PLUGINS: '. $n; $data .= wordwrap( ( $n > 30 ) ? '  |  WARNING - PERFORMANCE: Using this many network active plugins can cause site slowdowns and conflicts. Try to minimize plugins used.' : '', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	}
	if( !empty( $inactive_plugins ) ) {
		$data .= RSSD_EOL.RSSD_EOL.'INACTIVE PLUGINS:'.RSSD_EOL.RSSD_EOL;
		foreach ( $inactive_plugins as $plugin_path => $plugin ) {
			$slug					= trim( dirname( $plugin_path ), '/' );
			$wp_org_url				= 'https://wordpress.org/plugins/' . $slug . '/';
			$sec_chk_url			= 'https://wpvulndb.com/plugins/' . $slug;
			$plugin['PluginURI']	= self::fix_url( $plugin['PluginURI'], TRUE );
			$official_url_txt		= ( !empty( $plugin['PluginURI'] ) && $plugin['PluginURI'] !== $wp_org_url ) ? RSSD_EOL.$spc_5 . 'Official Site:  ' . $plugin['PluginURI'] : '';
			$security_chk_txt		= RSSD_EOL.$spc_5 . 'Security Check: ' . $sec_chk_url;
			$data .= wordwrap( $plugin['Name'] . ': ' . $plugin['Version'] . RSSD_EOL.$spc_5 . 'WordPress.org:  ' . $wp_org_url . $official_url_txt . $security_chk_txt, 26 + 75, RSSD_EOL.$spc_5 ); $data .= RSSD_EOL;
		}
		$n = (int) count( $inactive_plugins );
		$data .= RSSD_EOL.'TOTAL INACTIVE PLUGINS: '. $n; $data .= wordwrap( ( $n > 10 ) ? '  |  WARNING - PERFORMANCE: Even inactive plugins can slow down your site. If not using a plugin, uninstall it completely.' : '', 75, RSSD_EOL.$spc_26 ); $data .= RSSD_EOL;
	}
	unset( $plugin, $plugin_path, $active_plugins, $inactive_plugins, $network_plugins, $network_active_plugins, $network_inactive_plugins, $official_url_txt, $security_chk_txt, $wp_org_url, $sec_chk_url, $slug, $i, $n );
	$data .= RSSD_EOL;
	if( has_action( 'rssd_extra_info' ) ) {
		$extra_info = apply_filters( 'rssd_extra_info', '' );
		if( !empty( $extra_info ) ) {
			$data .= RSSD_EOL.RSSD_EOL.'EXTRA INFO:'.RSSD_EOL.RSSD_EOL;
			$data .= $extra_info.RSSD_EOL.RSSD_EOL; unset( $extra_info );
		}
	}
	$output = $header.$data; unset( $header );
	$last_transient = 'rssd_'.$remote_url_key;
	set_transient( $last_transient, $data, DAY_IN_SECONDS ); unset( $data );
	self::update_option( array( 'last_url_key' => $remote_url_key, 'last_transient_set' => $last_transient, ) ); unset( $remote_url_key, $last_transient, $last_transient_set, $last_transient_exp );
	if( is_admin() && is_super_admin() ) { /* If in admin and user is super admin ( 'is_admin()' is location, not user capability! */
		if( !empty( $_GET['option'] ) && 'advanced' === $_GET['option'] ) {
			$data_adv = '';
			$data_adv .= RSSD_EOL.RSSD_EOL.'// ADVANCED //////////////////////////////////////'.RSSD_EOL.RSSD_EOL.RSSD_EOL;
			$wp_config = self::detect_wpconfig();
			if( !empty( $wp_config ) ) {
				if( is_readable( $wp_config ) ) {
					$file_contents = file_get_contents( $wp_config );
					$file_contents = str_replace( array( "\r\r", "\r\n", "\n\n\n\n", "\n\n\n", ), array( "\n\n", "\n", "\n\n\n", "\n\n", ), trim( stripslashes( $file_contents ) ) );
					$file_contents = preg_replace( "~(table_prefix\s*\=\s*['\"]).*?(['\"];\s*(?:\n|\r|\rn))~i", "$1".RSSD_OBSC_PHRASE."$2", $file_contents );
					$file_contents = preg_replace( "~(define\(\s*['\"](?:DB_NAME|DB_USER|DB_PASSWORD|DB_HOST|AUTH_KEY|SECURE_AUTH_KEY|LOGGED_IN_KEY|NONCE_KEY|AUTH_SALT|SECURE_AUTH_SALT|LOGGED_IN_SALT|NONCE_SALT|NONCE_[A-Z0-9]+|SECURE_AUTH_[A-Z0-9]+|LOGGED_IN_[A-Z0-9]+|SECURE_AUTH_[A-Z0-9]+)\s*['\"],\s*).*?(\);\s*(?:\n|\r|\rn))~", "$1".RSSD_OBSC_PHRASE."$2", $file_contents );
					$file_contents = trim( $file_contents );
				} else {
					$file_contents = 'File exists, but PHP does not have read permission.';
				}
				$data_adv .= '// File Location: '.$wp_config.RSSD_EOL; unset( $wp_config );
				$data_adv .= '// File Contents: wp-config.php //////////////////'.RSSD_EOL.RSSD_EOL;
				$data_adv .= $file_contents.RSSD_EOL;
				$data_adv .= RSSD_EOL.'// End File Contents: wp-config.php //////////////'.RSSD_EOL.RSSD_EOL.RSSD_EOL;
			}
			$htaccess_files = FALSE === $is_nginx ? self::detect_htaccess() : FALSE;
			if( !empty( $htaccess_files ) && is_array( $htaccess_files ) ) {
				foreach( $htaccess_files as $i => $file ) {
					if( is_readable( $file ) ) {
						$file_contents = file_get_contents( $file );
						$file_contents = str_replace( array( "\r\r", "\r\n", "\n\n\n\n", "\n\n\n", ), array( "\n\n", "\n", "\n\n\n", "\n\n", ), trim( stripslashes( $file_contents ) ) );
						/* Custom replace rule goes here */
						
						$file_contents = preg_replace( "~\n+~", "\n", $file_contents );
						$file_contents = trim( $file_contents );
					} else {
						$file_contents = 'File exists, but PHP does not have read permission.';
					}
					$data_adv .= '// File Location: '.$file.RSSD_EOL;
					$data_adv .= '// File Contents: .htaccess //////////////////////'.RSSD_EOL.RSSD_EOL;
					$data_adv .= $file_contents.RSSD_EOL;
					$data_adv .= RSSD_EOL.'// End File Contents: .htaccess //////////////////'.RSSD_EOL.RSSD_EOL.RSSD_EOL;
				}
			}
			/**
			 *  TO DO:
			 *  - web.config for IIS
			 */
			$php_ini_files = self::detect_php_ini();
			if( !empty( $php_ini_files ) && is_array( $php_ini_files ) ) {
				foreach( $php_ini_files as $i => $file ) {
					if( is_readable( $file ) ) {
						$file_contents = file_get_contents( $file );
						$file_contents = str_replace(  array( "\r\r", "\r\n", "\n\n\n\n", "\n\n\n", ), array( "\n\n", "\n", "\n\n\n", "\n\n", ), trim( stripslashes( $file_contents ) ) );
						$file_contents = preg_replace( "~;.*?\n~", "\n", $file_contents."\n" );
						$file_contents = preg_replace( "~\n+~", "\n", $file_contents );
						$file_contents = trim( $file_contents );
					} else {
						$file_contents = 'File exists, but PHP does not have read permission.';
					}
					$data_adv .= '// File Location: '.$file.RSSD_EOL;
					$data_adv .= '// File Contents: php.ini ////////////////////////'.RSSD_EOL.RSSD_EOL;
					$data_adv .= $file_contents.RSSD_EOL;
					$data_adv .= RSSD_EOL.'// End File Contents: php.ini ////////////////////'.RSSD_EOL.RSSD_EOL.RSSD_EOL;
				}
			}
			unset( $htaccess_files, $php_ini_files, $file_contents, $file, $i );
			/**
			 *  TO DO:
			 *  - Scan for and pull in debug.log and error_log files...& ANALYZE - Add self::detect_debug_log() & self::detect_error_log()
			 *  - Provide links and answers for how to solve php.ini problems, along with one-click fixes
			 *  - Tab Navigation
			 */

			$data_adv .= '// PHP Configuration Settings ////////////////////'.RSSD_EOL.RSSD_EOL; /* Associative Array - Sort by Key */
			$ini_all   = ( function_exists( 'ini_get_all' ) ) ? (array) @ini_get_all() : array();
			$data_adv .= ( !empty( $ini_all ) ) ? print_r( self::msort_array( $ini_all ), TRUE ) : 'Detection not allowed by server configuration.'; unset( $ini_all );
			$data_adv .= RSSD_EOL.'// End PHP Configuration Settings ////////////////'.RSSD_EOL.RSSD_EOL.RSSD_EOL;

			$data_adv .= '// PHP Config Settings Changed at Runtime ////////'.RSSD_EOL.RSSD_EOL; /* Associative Array - Sort by Key */
			$ini_diff  = RS_System_Diagnostic::ini_diff();
			$data_adv .= ( !empty( $ini_diff ) ) ? print_r( $ini_diff, TRUE ) : 'No runtime changes detected.'; unset( $ini_diff );
			$data_adv .= RSSD_EOL.'// End PHP Config Settings Changed at Runtime ////'.RSSD_EOL.RSSD_EOL.RSSD_EOL;

			$data_adv .= '// Loaded PHP Extensions /////////////////////////'.RSSD_EOL.RSSD_EOL; /* Numerical Array - Sort by Value */
			$data_adv .= ( !empty( $loaded_extensions ) ) ? print_r( self::msort_array( $loaded_extensions ), TRUE ) : 'Detection not allowed by server configuration.'; unset( $loaded_extensions );
			$data_adv .= RSSD_EOL.'// End Loaded PHP Extensions /////////////////////'.RSSD_EOL.RSSD_EOL.RSSD_EOL;

			$data_adv .= '// Defined PHP Functions /////////////////////////'.RSSD_EOL.RSSD_EOL; /* Numerical Array - Sort by Value */
			$defined_func = get_defined_functions();
			$data_adv .= print_r( self::msort_array( $defined_func ), TRUE ); unset( $defined_func );
			$data_adv .= RSSD_EOL.'// End Defined PHP Functions /////////////////////'.RSSD_EOL.RSSD_EOL.RSSD_EOL;

			$data_adv .= '// Disabled PHP Functions ////////////////////////'.RSSD_EOL.RSSD_EOL; /* Numerical Array - Sort by Value */
			$disable_func = trim( ini_get( 'disable_functions' ) );
			$dis_func_arr = array();
			if( !empty( $disable_func ) ) {
				$disable_func = str_replace( ' ', '', $disable_func );
				$dis_func_arr = explode( ',', $disable_func );
			} else {
				$dis_func_arr[] = 'No functions disabled.'; /* TO DO: Translate*/
			}
			$data_adv .= print_r( self::msort_array( $dis_func_arr ), TRUE ); unset( $disable_func, $dis_func_arr );
			$data_adv .= RSSD_EOL.'// End Disabled PHP Functions ////////////////////'.RSSD_EOL.RSSD_EOL.RSSD_EOL;

			$data_adv .= '// Defined PHP Classes ///////////////////////////'.RSSD_EOL.RSSD_EOL; /* Numerical Array - Sort by Value */
			$data_adv .= print_r( self::msort_array( get_declared_classes() ), TRUE );
			$data_adv .= RSSD_EOL.'// End Defined PHP Classes //////////////////////'.RSSD_EOL.RSSD_EOL.RSSD_EOL;

			$data_adv .= '// Defined PHP Constants ////////////////////////'.RSSD_EOL.RSSD_EOL; /* Associative Array - Sort by Key */
			$def_php_cons = get_defined_constants( TRUE );
			$def_php_cons_obs = $def_php_cons_unset	= array();
			if( isset( $def_php_cons['user'] ) ) {
				foreach( $def_php_cons['user'] as $k => $v ) {
					if( self::preg_match( "~(^(ARRAY|array|AUTH|COOKIEHASH|DB|LOGGED_IN|NONCE|OBJECT|object|PASS|SECURE(_AUTH)?)(_|$)|(_(DE|MD)BUG_SERVER)|(^|_)(COOKIE|KEY|PASS(WORD)?|SALT|TABLE)$)~", $k ) ) {
						$def_php_cons_obs[] = $k;
					}
					if( 0 === strpos( RSSD_SERVER_NAME_REV, RSSD_DEBUG_SERVER_NAME_REV ) ) {
						if( self::preg_match( "~((^|_)(EOL|DISPLAY_OUTPUT|OBSC_PHRASE)$)~", $k ) ) {
							$def_php_cons_unset[] = $k;
						}
						if( self::preg_match( "~((_(DE|MD)BUG_SERVER)|(^|_)(DONATE_(LINK|URL)|HASH(_ALT)?|JSONST|NODOT|OPTIONS_DEFAULT|RATING_(LINK|URL)|REF2XJS|RGX_(FREEMAIL|IP(C?(STR|VAL))?|TLD|[A-Z]{3,})|SERVER_NAME(_REV)?)$)~", $k ) ) {
							$def_php_cons_obs[] = $k;
						}
					} else {
						if( self::preg_match( "~((_(DE|MD)BUG_SERVER)|(^|_)(DISPLAY_OUTPUT|DONATE_(LINK|URL)|EOL|HASH(_ALT)?|JSONST|NODOT|OBSC_PHRASE|OPTIONS_DEFAULT|RATING_(LINK|URL)|REF2XJS|RGX_(FREEMAIL|IP(C?(STR|VAL))?|TLD|[A-Z]{3,})|SERVER_NAME(_REV)?)$)~", $k ) ) {
							$def_php_cons_unset[] = $k;
						}
						/* (RS(MG|MP|FB|HC[PL]?|NFB|SB|SD)|WPSS) */
						if( self::preg_match( "~(^(ARRAY|array|AUTH|COOKIEHASH|DB|LOGGED_IN|NONCE|OBJECT|object|PASS|SECURE(_AUTH)?)(_|$)|(^|_)(COOKIE|KEY|PASS(WORD)?|SALT|TABLE)$)~", $k ) ) {
							$def_php_cons_obs[] = $k;
						}
					}
				}
			}
			foreach( $def_php_cons_obs as $k ) {
				if( isset( $def_php_cons['user'][$k] ) ) { $def_php_cons['user'][$k] = RSSD_OBSC_PHRASE; }
			}
			foreach( $def_php_cons_unset as $k ) {
				if( isset( $def_php_cons['user'][$k] ) ) { unset( $def_php_cons['user'][$k] ); }
			}
			$def_php_cons = self::msort_array( $def_php_cons );
			$data_adv .= print_r( $def_php_cons, TRUE ); unset( $def_php_cons, $def_php_cons_obs, $def_php_cons_unset, $k );
			$data_adv .= RSSD_EOL.'// End Defined PHP Constants ////////////////////'.RSSD_EOL.RSSD_EOL.RSSD_EOL;

			$data_adv .= '// Defined PHP Variables ////////////////////////'.RSSD_EOL.RSSD_EOL; /* Associative Array - Sort by Key */
			define( 'RSSD_OUTPUT', $output ); define( 'RSSD_DATA_ADV', $data_adv ); unset( $output, $data_adv, $cached, $spc_4, $spc_5, $spc_26, $spc_32 );
			define( 'RSSD_DEF_PHP_VARS', self::json_encode( get_defined_vars() ) );
			$def_php_vars = json_decode( RSSD_DEF_PHP_VARS, TRUE );
			$def_php_vars_unset = array( 'id', 'is_apache', 'is_IIS', 'is_iis7', 'is_nginx', 'remote_url', 'wpdb', '_RSSD_ENV' );
			foreach( $def_php_vars_unset as $k ) {
				if( isset( $def_php_vars[$k] ) ) { unset( $def_php_vars[$k] ); }
				if( isset( $def_php_vars['user'][$k] ) ) { unset( $def_php_vars['user'][$k] ); }
			}			
			$def_php_vars = self::msort_array( $def_php_vars );
			$data_adv  = RSSD_DATA_ADV;
			$data_adv .= print_r( $def_php_vars, TRUE ); unset( $def_php_vars, $def_php_vars_unset, $k );
			$data_adv .= RSSD_EOL.'// End Defined PHP Variables ////////////////////'.RSSD_EOL.RSSD_EOL.RSSD_EOL;

			$data_adv .= '// Defined $_SERVER Variables ///////////////////'.RSSD_EOL.RSSD_EOL; /* Associative Array - Sort by Key */
			$def_srv_vars = self::msort_array( $_SERVER );
			$srv_vars_obs = array( 'HTTP_COOKIE', );
			if( 0 !== strpos( RSSD_SERVER_NAME_REV, RSSD_DEBUG_SERVER_NAME_REV ) ) {
				foreach( $srv_vars_obs as $k ) {
					if( isset( $def_srv_vars[$k] ) ) { $def_srv_vars[$k] = RSSD_OBSC_PHRASE; }
				}
				unset( $k, $srv_vars_obs );
			}
			$data_adv .= print_r( $def_srv_vars, TRUE ); unset( $def_srv_vars );
			$data_adv .= RSSD_EOL.'// End Defined $_SERVER Variables ///////////////'.RSSD_EOL.RSSD_EOL.RSSD_EOL;

			$data_adv .= '// Defined $_ENV Variables //////////////////////'.RSSD_EOL.RSSD_EOL; /* Associative Array - Sort by Key */
			$def_env_vars = self::msort_array( self::$_ENV );
			$env_vars_obs = array( 'HTTP_COOKIE', );
			if( 0 !== strpos( RSSD_SERVER_NAME_REV, RSSD_DEBUG_SERVER_NAME_REV ) ) {
				foreach( $env_vars_obs as $k ) {
					if( isset( $def_env_vars[$k] ) ) { $def_env_vars[$k] = RSSD_OBSC_PHRASE; }
				}
				unset( $k, $env_vars_obs );
			}
			$data_adv .= print_r( $def_env_vars, TRUE ); unset( $def_env_vars );
			$data_adv .= RSSD_EOL.'// End Defined $_ENV Variables //////////////////'.RSSD_EOL.RSSD_EOL.RSSD_EOL;

			if( 0 === strpos( RSSD_SERVER_NAME_REV, RSSD_DEBUG_SERVER_NAME_REV ) ) {
				$data_adv .= '// Defined $_SESSION Variables //////////////////'.RSSD_EOL.RSSD_EOL; /* Associative Array - Sort by Key */
				$def_sess_vars = self::msort_array( $_SESSION );
				$data_adv .= print_r( $def_sess_vars, TRUE ); unset( $def_sess_vars );
				$data_adv .= RSSD_EOL.'// End Defined $_SESSION Variables //////////////'.RSSD_EOL.RSSD_EOL.RSSD_EOL;
			}

			$data_adv .= '// Request Headers //////////////////////////////'.RSSD_EOL.RSSD_EOL; /* Associative Array - Sort by Key */
			$headers_req = self::msort_array( (array) @apache_request_headers() );
			$hdrs_req_obs = array( 'Cookie', );
			if( 0 !== strpos( RSSD_SERVER_NAME_REV, RSSD_DEBUG_SERVER_NAME_REV ) ) {
				foreach( $hdrs_req_obs as $k ) {
					if( isset( $headers_req[$k] ) ) { $headers_req[$k] = RSSD_OBSC_PHRASE; }
				}
				unset( $k, $hdrs_req_obs );
			}
			$data_adv .= print_r( $headers_req, TRUE ); unset( $headers_req );
			$data_adv .= RSSD_EOL.'// End Request Headers //////////////////////////'.RSSD_EOL.RSSD_EOL.RSSD_EOL;

			$data_adv .= '// Response Headers /////////////////////////////'.RSSD_EOL.RSSD_EOL; /* Associative Array - Sort by Key */
			$headers_res = self::msort_array( (array) @apache_response_headers() );
			$hdrs_res_obs = array( 'Set-Cookie', 'Set-Cooki', );
			if( 0 !== strpos( RSSD_SERVER_NAME_REV, RSSD_DEBUG_SERVER_NAME_REV ) ) {
				foreach( $hdrs_res_obs as $k ) {
					if( isset( $headers_res[$k] ) ) { $headers_res[$k] = RSSD_OBSC_PHRASE; }
				}
				unset( $k, $hdrs_res_obs );
			}
			$data_adv .= print_r( $headers_res, TRUE ); unset( $headers_res );
			$data_adv .= RSSD_EOL.'// End Response Headers /////////////////////////'.RSSD_EOL.RSSD_EOL;

			$output  = RSSD_OUTPUT;
			$output .= $data_adv; unset( $data_adv );

		}
	}
} else {
	$error = 'ERROR: Nothing to see here. [Code E003]';
	self::wp_die( $error, '404' );
}

echo $output; unset( $output );

